/* tslint:disable */
/* eslint-disable */
/**
 * eventportal-backend
 * Eventportal API Spec
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mizphses@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EventSpeechProposalSpeakersInner } from './EventSpeechProposalSpeakersInner';
import {
    EventSpeechProposalSpeakersInnerFromJSON,
    EventSpeechProposalSpeakersInnerFromJSONTyped,
    EventSpeechProposalSpeakersInnerToJSON,
} from './EventSpeechProposalSpeakersInner';

/**
 * 
 * @export
 * @interface EventSpeechProposal
 */
export interface EventSpeechProposal {
    /**
     * 発表形式。presentationまたはposter
     * @type {string}
     * @memberof EventSpeechProposal
     */
    presentationType?: string;
    /**
     * 発表タイトル
     * @type {string}
     * @memberof EventSpeechProposal
     */
    title?: string;
    /**
     * 発表概要
     * @type {string}
     * @memberof EventSpeechProposal
     */
    _abstract?: string;
    /**
     * 発表時間(分)
     * @type {number}
     * @memberof EventSpeechProposal
     */
    estimatedTime?: number;
    /**
     * ゼミ名または所属組織 ※運営委員としての発表の場合などはofficial, など例外があります
     * @type {string}
     * @memberof EventSpeechProposal
     */
    seminar?: string;
    /**
     * 登壇者情報
     * @type {Array<EventSpeechProposalSpeakersInner>}
     * @memberof EventSpeechProposal
     */
    speakers?: Array<EventSpeechProposalSpeakersInner>;
}

/**
 * Check if a given object implements the EventSpeechProposal interface.
 */
export function instanceOfEventSpeechProposal(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function EventSpeechProposalFromJSON(json: any): EventSpeechProposal {
    return EventSpeechProposalFromJSONTyped(json, false);
}

export function EventSpeechProposalFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventSpeechProposal {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'presentationType': !exists(json, 'presentationType') ? undefined : json['presentationType'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        '_abstract': !exists(json, 'abstract') ? undefined : json['abstract'],
        'estimatedTime': !exists(json, 'estimated_time') ? undefined : json['estimated_time'],
        'seminar': !exists(json, 'seminar') ? undefined : json['seminar'],
        'speakers': !exists(json, 'speakers') ? undefined : ((json['speakers'] as Array<any>).map(EventSpeechProposalSpeakersInnerFromJSON)),
    };
}

export function EventSpeechProposalToJSON(value?: EventSpeechProposal | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'presentationType': value.presentationType,
        'title': value.title,
        'abstract': value._abstract,
        'estimated_time': value.estimatedTime,
        'seminar': value.seminar,
        'speakers': value.speakers === undefined ? undefined : ((value.speakers as Array<any>).map(EventSpeechProposalSpeakersInnerToJSON)),
    };
}

